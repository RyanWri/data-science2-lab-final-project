# -*- coding: utf-8 -*-
"""EDA_GeneralData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I18mfmOaFsj6BmCA4kA6kSInSso0s8qy

#  📊📈🗂️🗃️ EDA - Exploratory data analysis - for 'General Data' sheet 🗃️🗂️📈📊

---


In this section, we will explore and visualize the data from our rehospitalization excel file. We will present all the visualizations and correlations between the parameters.
the analysis will be separated into two groups: numeric values, and character values.

# Basic Overview:
Dimensions of the data: Get the number of rows and columns.

Summary statistics: Check the summary statistics for numerical columns.

Check for missing values: Identify how many and which columns have missing values.
"""

import pandas as pd

file_path = '/content/rehospitalization.xlsx'

# Load the Excel file
excel_file = pd.ExcelFile(file_path)

# Create a dataframe for a specific sheet
sheet_name = 'GeneralData'
df_general_data = pd.read_excel(file_path, sheet_name=sheet_name)

# Basic overview
print(df_general_data.shape, '\n')  # Rows and columns
print(df_general_data.info(), '\n')  # Data types and non-null counts
print(df_general_data.describe(), '\n')  # Summary statistics for numerical data
print(df_general_data.isnull().sum())  # Missing values by column

"""# Column Types and Unique Values:
For numerical columns, identify the range of values.
"""

# Checking for numerical columns
categorical_cols = df_general_data.select_dtypes(include=['object', 'category']).columns

numerical_cols = df_general_data.select_dtypes(include=['int64', 'float64']).columns
print(df_general_data[numerical_cols].describe())

"""# Outlier Detection
Detect outliers using the interquartile range (IQR) method.
"""

# Outlier detection with IQR
for col in numerical_cols:
    Q1 = df_general_data[col].quantile(0.25)
    Q3 = df_general_data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = df_general_data[(df_general_data[col] < lower_bound) | (df_general_data[col] > upper_bound)]
    print(f"{col}: Number of outliers = {outliers.shape[0]}")

"""Since the numbers of outliers are small comparing to the dataframe we will ignore them, to better understand the true behavior of the data.

Next, Clean the outliers form the data for vizualiztion first
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Identify numerical columns except 'מחלות כרוניות'
numerical_cols = df_general_data.select_dtypes(include=['int64', 'float64', 'float']).columns.drop('מחלות כרוניות')

# Apply the IQR filter to each of these numerical columns without affecting 'מחלות כרוניות'
for col in numerical_cols:
    Q1 = df_general_data[col].quantile(0.25)
    Q3 = df_general_data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Filter outliers only within the specific column
    df_general_data = df_general_data[(df_general_data[col] >= lower_bound) & (df_general_data[col] <= upper_bound)]

"""##Histograms for Numerical Columns:
Histograms help in understanding the distribution of numerical data.
"""

# Setting a color palette
sns.set_palette('Set2')

# Plotting histograms for numerical data
numerical_cols = df_general_data.select_dtypes(include=['int64', 'float64']).columns

# Plot histograms
df_general_data[numerical_cols].hist(bins=15, color='teal', edgecolor='black', linewidth=0.5, figsize=(16, 10))
plt.suptitle('Histograms of Numerical Columns', size=16)
plt.tight_layout()
plt.show()

# Now, count and plot 'מחלות כרוניות' as it retains more data
chronic_counts = df_general_data['מחלות כרוניות'].value_counts()
chronic_counts

"""#Boxplots for Outlier Detection:
Boxplots are great for spotting outliers.
"""

# Plotting boxplots for each numerical column
for col in numerical_cols:
    plt.figure(figsize=(10, 5))
    sns.boxplot(data=df_general_data[col], color='coral')
    plt.title(f'Boxplot of {col}', fontsize=14)
    plt.show()

"""# Bar Charts for Categorical Data:
For categorical columns, bar charts can showcase the distribution.
"""

# Bar charts for categorical columns
categorical_cols = df_general_data.select_dtypes(include=['object', 'category']).columns

# Plotting bar charts for categorical columns
for col in categorical_cols:
    if col not in ['השכלה', 'תרופות קבועות']:
      plt.figure(figsize=(10, 5))
      sns.countplot(y=df_general_data[col], palette='coolwarm', edgecolor='black')
      plt.title(f'Distribution of {col}', fontsize=14)
      plt.show()

"""# KDE Plot for Distribution of Numerical Columns
KDE (Kernel Density Estimate) is a smooth line plot for visualizing data distribution.


"""

# KDE Plot for numerical data
for col in numerical_cols:
    plt.figure(figsize=(10, 6))
    sns.kdeplot(df_general_data[col], color='purple', shade=True, bw_adjust=1.5)
    plt.title(f'Distribution of {col} (KDE)', fontsize=14)
    plt.xlabel(col, fontsize=12)
    plt.ylabel('Density', fontsize=12)
    plt.show()

"""# Pair Plot for Numerical Data
A pair plot helps in visualizing relationships between multiple numerical columns.

"""

# Pair plot to check relationships between numerical variables
sns.pairplot(df_general_data[numerical_cols], diag_kind='kde', corner=True, plot_kws={'alpha': 0.6})
plt.suptitle('Pair Plot of Numerical Data', size=16)
plt.show()

"""Note:
Here we can see a high correlation between 'משקל' to 'BMI' which is a formulation of it, obviously

# Correlation Heatmap for Numerical Columns:
Heatmaps can show the correlation between numerical columns
"""

# Correlation matrix heatmap
plt.figure(figsize=(12, 8))
correlation_matrix = df_general_data[numerical_cols].corr()

# Drawing heatmap
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, fmt='.2f')
plt.title('Correlation Heatmap', fontsize=16)
plt.show()

"""# Violin Plot for Numerical vs Categorical Columns:
Violin plots combine box plots and KDE, visualization for comparing distributions across categories.
"""

# Violin plot for numerical vs categorical
for col in categorical_cols:
  if col not in ['השכלה', 'תרופות קבועות']:
    plt.figure(figsize=(10, 6))
    sns.violinplot(x=df_general_data[col], y=df_general_data[numerical_cols[0]], palette="viridis")
    plt.title(f'Violin Plot of {col} vs {numerical_cols[0]}', fontsize=16)
    plt.show()

"""This is the chapter of EDA - Exploratory data analysis, for General Data sheet."""